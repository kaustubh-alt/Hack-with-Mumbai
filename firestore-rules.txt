// Firestore Security Rules for Blood Bank Donor Management System
// These rules should be applied in the Firebase Console

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Donors collection
    match /donors/{donorId} {
      // Allow read access to authenticated admin users
      allow read: if request.auth != null && 
                     request.auth.token.admin == true;
      
      // Allow write access to authenticated admin users
      allow write: if request.auth != null && 
                      request.auth.token.admin == true &&
                      validateDonorData(request.resource.data);
      
      // Allow donors to read their own data
      allow read: if request.auth != null && 
                     request.auth.uid == resource.data.userId;
      
      // Allow donors to update their own contact preferences
      allow update: if request.auth != null && 
                       request.auth.uid == resource.data.userId &&
                       onlyUpdatingAllowedFields();
    }
    
    // Blood requests collection
    match /bloodRequests/{requestId} {
      allow read, write: if request.auth != null && 
                            request.auth.token.admin == true;
    }
    
    // Donation history collection
    match /donations/{donationId} {
      allow read, write: if request.auth != null && 
                            request.auth.token.admin == true;
      
      // Allow donors to read their own donation history
      allow read: if request.auth != null && 
                     request.auth.uid == resource.data.donorId;
    }
    
    // Blood inventory collection
    match /inventory/{inventoryId} {
      allow read, write: if request.auth != null && 
                            request.auth.token.admin == true;
    }
    
    // Camps collection
    match /camps/{campId} {
      allow read: if true; // Public read access for camp information
      allow write: if request.auth != null && 
                      request.auth.token.admin == true;
    }
    
    // Helper functions
    function validateDonorData(data) {
      return data.keys().hasAll(['firstName', 'lastName', 'email', 'bloodType']) &&
             data.firstName is string && data.firstName.size() > 0 &&
             data.lastName is string && data.lastName.size() > 0 &&
             data.email is string && data.email.matches('.*@.*\\..*') &&
             data.bloodType in ['A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'];
    }
    
    function onlyUpdatingAllowedFields() {
      let allowedFields = ['contactPreferences', 'phone', 'email', 'address'];
      return request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(allowedFields);
    }
  }
}